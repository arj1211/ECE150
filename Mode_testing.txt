d = { 1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5}
size = 12

int largestFreq = 1; // counts the number of occurences a number in data must have to be considered a mode
int numberOfTimesTheCurrentNumberAppears = 1;
int modeIndex = 0; // index into mode[] . modeIndex+1 is the number of modes thus far
mode[modeIndex] = d[0]; // initially set the mode to the first element in d

for	( every element in d, starting at d[i=1] ; i++)
{
	if ( mode[modeIndex] == d[i] ) 
		// if the next element in d is the same as the previous one, we have a potential mode
		// numberOfTimesTheCurrentNumberAppears is now equal to the number of times this number has occurred
		numberOfTimesTheCurrentNumberAppears++

	if ( numberOfTimesTheCurrentNumberAppears > largestFreq ) // found a new mode that replaces the old

		largestFreq = numberOfTimesTheCurrentNumberAppears;
		mode[modeIndex] = d[i];

	else if ( numberOfTimesTheCurrentNumberAppears == largestFreq ) // found a new additional mode
		modeIndex++;
		mode[modeIndex]=d[i]


}








9995 9995 9996 9996 9996 9997 9997 9998 9998 9998 9998 9999 9999 10000 10000